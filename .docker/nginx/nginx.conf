server {
  listen 80;
  server_name localhost;

  location ~* \.(jpg|jpeg|png|gif|ico|css|js|woff|woff2|ttf|svg|map|mp3)$ {
        # Adjust buffer sizes to handle larger payloads
        proxy_buffer_size 1k;
        proxy_buffers 4 16k;
        proxy_busy_buffers_size 16k;

        proxy_pass http://node:3000;
        proxy_set_header Host $host;

        # Hide headers from the Meteor response so we can set our own cache headers
        proxy_hide_header "cache-control";
        proxy_hide_header "expires";

        add_header "cache-control" "public, max-age=3600" always;

        # the above can be replaced by the following directives:
        expires 30d;
        add_header Pragma public;
        add_header Cache-Control "public";
  }

  location / {
#         proxy_buffer_size 8k;
#         proxy_buffers 4 8k;
#         proxy_busy_buffers_size 8k;
        proxy_buffer_size 16k;             # Adjust this value as needed
        proxy_buffers 4 32k;               # Increase the number and size of buffers
        proxy_busy_buffers_size 64k;       # Increase busy buffer size if needed

        proxy_pass http://node:3000;
  }

  location /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
  }

  location ~ ^/sockjs/[0-9]+/[a-z0-9]+/websocket$ { # not fully sure this is dynamic and if regex applies for all the cases
        proxy_buffer_size 2k;
        proxy_buffers 4 1k;
        proxy_busy_buffers_size 2k;

        proxy_pass http://node:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
  }
}